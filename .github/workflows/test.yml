name: Test Suite

on:
  push:
    branches: [ main, develop, 'feature/**', 'fix/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  JEST_COVERAGE_THRESHOLD: '80'

jobs:
  # Unit tests with coverage
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run typecheck
        run: npm run typecheck
      
      - name: Run unit tests with coverage
        run: npm test -- --projects unit --coverage --coverageDirectory=coverage/unit
        env:
          CI: true
          NODE_OPTIONS: --experimental-vm-modules
      
      - name: Upload unit test coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node == 18
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: coverage/unit
          retention-days: 7
  
  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests with coverage
        run: npm test -- --projects integration --coverage --coverageDirectory=coverage/integration
        env:
          CI: true
          NODE_OPTIONS: --experimental-vm-modules
        timeout-minutes: 10
      
      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: coverage/integration
          retention-days: 7
  
  # E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run E2E tests
        run: npm test -- --projects e2e --coverage --coverageDirectory=coverage/e2e
        env:
          CI: true
          NODE_OPTIONS: --experimental-vm-modules
        timeout-minutes: 15
      
      - name: Upload E2E test coverage
        uses: actions/upload-artifact@v4
        with:
          name: e2e-coverage
          path: coverage/e2e
          retention-days: 7
  
  # Memory subsystem tests
  memory-tests:
    name: Memory Subsystem Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run memory tests with coverage
        run: npm test -- --projects memory --coverage --coverageDirectory=coverage/memory
        env:
          CI: true
          NODE_OPTIONS: --experimental-vm-modules
      
      - name: Upload memory test coverage
        uses: actions/upload-artifact@v4
        with:
          name: memory-coverage
          path: coverage/memory
          retention-days: 7
  
  # Coverage merge and reporting
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, memory-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      
      - name: Install coverage tools
        run: |
          npm install -g nyc
          npm install -g codecov
      
      - name: Merge coverage reports
        run: |
          mkdir -p coverage
          cp -r coverage-artifacts/unit-coverage/* coverage/ || true
          cp -r coverage-artifacts/integration-coverage/* coverage/ || true
          cp -r coverage-artifacts/e2e-coverage/* coverage/ || true
          cp -r coverage-artifacts/memory-coverage/* coverage/ || true
          
          # Merge all lcov files
          find coverage -name lcov.info -exec cat {} \; > coverage/lcov.info
      
      - name: Generate coverage summary
        run: |
          nyc report --reporter=text --reporter=json-summary --temp-dir=coverage
          
          # Check coverage thresholds
          node -e "
          const summary = require('./coverage/coverage-summary.json');
          const total = summary.total;
          console.log('Coverage Summary:');
          console.log('Branches:', total.branches.pct + '%');
          console.log('Functions:', total.functions.pct + '%');
          console.log('Lines:', total.lines.pct + '%');
          console.log('Statements:', total.statements.pct + '%');
          
          const threshold = ${{ env.JEST_COVERAGE_THRESHOLD }};
          const failed = [];
          if (total.branches.pct < threshold) failed.push('branches');
          if (total.functions.pct < threshold) failed.push('functions');
          if (total.lines.pct < threshold) failed.push('lines');
          if (total.statements.pct < threshold) failed.push('statements');
          
          if (failed.length > 0) {
            console.error('Coverage threshold not met for:', failed.join(', '));
            process.exit(1);
          }
          "
      
      - name: Upload to Codecov
        if: github.event_name != 'schedule'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests,integration,e2e,memory
          name: claude-flow-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = summary.total;
            
            const comment = `## Test Coverage Report
            
            | Type | Coverage | Threshold |
            |------|----------|-----------|
            | Branches | ${total.branches.pct.toFixed(2)}% | ${process.env.JEST_COVERAGE_THRESHOLD}% |
            | Functions | ${total.functions.pct.toFixed(2)}% | ${process.env.JEST_COVERAGE_THRESHOLD}% |
            | Lines | ${total.lines.pct.toFixed(2)}% | ${process.env.JEST_COVERAGE_THRESHOLD}% |
            | Statements | ${total.statements.pct.toFixed(2)}% | ${process.env.JEST_COVERAGE_THRESHOLD}% |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
  
  # Performance tests (optional, runs on schedule only)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run performance tests
        run: npm test -- tests/performance
        env:
          CI: true
          NODE_OPTIONS: --experimental-vm-modules
        timeout-minutes: 30
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: test-results/performance
          retention-days: 30
  
  # Test result summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [unit-tests, integration-tests, e2e-tests, memory-tests, coverage-report]
    
    steps:
      - name: Test Status Summary
        run: |
          echo "## Test Run Summary"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Memory Tests: ${{ needs.memory-tests.result }}"
          echo "Coverage Report: ${{ needs.coverage-report.result }}"